name: Virtual Audio Driver Building

on:
  workflow_dispatch:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64, ARM64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Check Chocolatey installation
        run: choco --version

      - name: Install Visual Studio 2022 dependencies
        run: |
          choco install visualstudio2022-workload-manageddesktop -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install visualstudio2022-workload-nativedesktop -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install visualstudio2022-workload-vctools -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install windowsdriverkit11 -y
          if ($LASTEXITCODE -ne 0) { exit 1 }

      # Create MSBuild properties file to disable INF verification and API validation
      - name: Create MSBuild properties
        run: |
          $propsContent = @"
<Project>
  <PropertyGroup>
    <!-- Disable INF verification -->
    <DisableInfVerifier>true</DisableInfVerifier>
    <SkipInf>true</SkipInf>
    <!-- Disable API validation -->
    <ValidateDriverApiCompatibility>false</ValidateDriverApiCompatibility>
  </PropertyGroup>
</Project>
"@
          Set-Content -Path "DisableVerification.props" -Value $propsContent
          Write-Host "Created MSBuild properties file to disable verification steps"

      # Build with verification steps disabled
      - name: Build the driver
        run: |
          msbuild "VirtualAudioDriver.sln" /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:ForceImportBeforeCppTargets="$PWD\DisableVerification.props"

      # Find and locate driver files with improved search pattern
      - name: Locate driver files
        id: locate_files
        run: |
          # Search for VirtualAudioDriver.sys files
          $outputDir = "Source/Main/${{ matrix.platform }}/${{ matrix.configuration }}"
          Write-Host "Checking output directory: $outputDir"
          
          # Check if the expected output directory exists
          if (Test-Path $outputDir) {
            $driverFiles = Get-ChildItem -Path $outputDir -Recurse -File -Include "VirtualAudioDriver.sys"
            if ($driverFiles.Count -gt 0) {
              $driverFile = $driverFiles[0].FullName
              $driverDir = Split-Path -Parent $driverFile
              
              Write-Host "Found driver at: $driverFile"
              Write-Host "Driver directory: $driverDir"
              
              echo "DRIVER_DIR=$driverDir" >> $env:GITHUB_ENV
              
              # Also look for the INF file in the same directory
              $infFiles = Get-ChildItem -Path $driverDir -Filter "*.inf"
              if ($infFiles.Count -gt 0) {
                Write-Host "Found INF file: $($infFiles[0].FullName)"
              } else {
                Write-Warning "No INF file found in driver directory!"
              }
            } else {
              Write-Warning "Could not find VirtualAudioDriver.sys file in expected directory!"
            }
          } else {
            Write-Warning "Expected output directory not found: $outputDir"
            
            # Fall back to a broader search
            $sysFiles = Get-ChildItem -Path . -Recurse -Filter "VirtualAudioDriver.sys" | 
                        Where-Object { $_.FullName -like "*\${{ matrix.platform }}\${{ matrix.configuration }}*" }
            
            if ($sysFiles.Count -gt 0) {
              $driverFile = $sysFiles[0].FullName
              $driverDir = Split-Path -Parent $driverFile
              
              Write-Host "Found driver at: $driverFile"
              Write-Host "Driver directory: $driverDir"
              
              echo "DRIVER_DIR=$driverDir" >> $env:GITHUB_ENV
            } else {
              Write-Warning "Could not find VirtualAudioDriver.sys using fallback search!"
            }
          }

      - name: List build directory
        run: |
          if (Test-Path env:DRIVER_DIR) {
            Write-Host "Contents of driver directory:"
            dir "${{ env.DRIVER_DIR }}"
          } else {
            Write-Host "Searching for any built files:"
            Get-ChildItem -Path . -Recurse -Include "*.sys","*.inf" | ForEach-Object {
              Write-Host $_.FullName
            }
          }

      - name: Upload built driver
        id: upload_artifact
        if: env.DRIVER_DIR != ''
        uses: actions/upload-artifact@v4
        with:
          name: Built-Driver-${{ matrix.configuration }}-${{ matrix.platform }}
          path: |
            ${{ env.DRIVER_DIR }}\VirtualAudioDriver.sys
            ${{ env.DRIVER_DIR }}\*.inf

      # Fallback upload if specific files weren't found
      - name: Fallback upload
        if: env.DRIVER_DIR == ''
        uses: actions/upload-artifact@v4
        with:
          name: Built-Files-${{ matrix.configuration }}-${{ matrix.platform }}
          path: |
            *\${{ matrix.platform }}\${{ matrix.configuration }}\**\*.sys
            *\${{ matrix.platform }}\${{ matrix.configuration }}\**\*.inf

      - name: Generate release tag
        id: generate_tag
        run: |
          $releaseTag = (Get-Date).ToString('yy.MM.dd')
          echo "RELEASE_TAG=$releaseTag" >> $env:GITHUB_ENV

      - name: Show generated release tag
        run: |
          echo "Generated Release Tag: ${{ env.RELEASE_TAG }}"